// <auto-generated />
using System;
using Exam.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Exam.Infrastructure.Migrations
{
    [DbContext(typeof(ExamContext))]
    partial class ExamContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationCore.Domain.Menmbre", b =>
                {
                    b.Property<string>("matricule")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("matricule");

                    b.ToTable("Menmbres");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Projet", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Code");

                    b.ToTable("Projets");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Sprint", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("ProjetCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("dateDebut")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("id");

                    b.HasIndex("ProjetCode");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Tache", b =>
                {
                    b.Property<string>("Titre")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SprintKey")
                        .HasColumnType("int");

                    b.Property<string>("MembreKey")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("dateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateFin")
                        .HasColumnType("datetime2");

                    b.Property<int>("etatTache")
                        .HasColumnType("int");

                    b.HasKey("Titre", "SprintKey", "MembreKey");

                    b.HasIndex("MembreKey");

                    b.HasIndex("SprintKey");

                    b.ToTable("Taches");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Sprint", b =>
                {
                    b.HasOne("ApplicationCore.Domain.Projet", "Projet")
                        .WithMany("Sprint")
                        .HasForeignKey("ProjetCode");

                    b.Navigation("Projet");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Tache", b =>
                {
                    b.HasOne("ApplicationCore.Domain.Menmbre", "Menmbre")
                        .WithMany("Taches")
                        .HasForeignKey("MembreKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Domain.Sprint", "Sprint")
                        .WithMany("Taches")
                        .HasForeignKey("SprintKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menmbre");

                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Menmbre", b =>
                {
                    b.Navigation("Taches");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Projet", b =>
                {
                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Sprint", b =>
                {
                    b.Navigation("Taches");
                });
#pragma warning restore 612, 618
        }
    }
}
